name: Create pihole01/02 VMs

on:
  workflow_dispatch:
    inputs:
      createMirror:
        description: 'Create local terraform mirror files'
        required: true
        default: false
        type: boolean
      skipTerraform:
        description: 'Skip creating or updating the VM'
        required: true
        default: false
        type: boolean

env:
  # VM_NAME:
  VM_FOLDER: /INFRA
  # VM_IP_ADDRESS:

jobs:
  create-opentofu-providers-mirror:
    if: ${{ inputs.createMirror }}
    runs-on: [self-hosted, linux, initial]
    container: ghcr.io/opentofu/opentofu:1.9.0
    steps:
      - uses: actions/checkout@v4

      - name: Create providers mirror
        run: |
          echo "[started] Creating mirror"
          cd terraform
          rm -rf ./mirror
          mkdir -p ./mirror
          tofu providers mirror ./mirror || tofu providers mirror ./mirror
          echo "[done] Creating mirror"
    
      - name: Workaround for git
        run: git config --global --add safe.directory '*'

      - uses: stefanzweifel/git-auto-commit-action@v5
        with:
          file_pattern: 'terraform/mirror/*'
          commit_message: Automatic changes | OpenTofu Providers Mirror

  create-vm-from-template:
    if: ${{ !inputs.skipTerraform && !failure() && !cancelled() }}
    needs: [create-opentofu-providers-mirror]
    runs-on: [self-hosted, linux, initial]
    container: ghcr.io/opentofu/opentofu:1.9.0
    strategy:
      max-parallel: 1
      matrix:
        include:
          - vm_name: pihole01
            vm_ip_address: ${{ vars.VM_PIHOLE01_IP }}
          - vm_name: pihole02
            vm_ip_address: ${{ vars.VM_PIHOLE02_IP }}
    env:
      VM_NAME: ${{ matrix.vm_name }}
      VM_IP_ADDRESS: ${{ matrix.vm_ip_address }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Set variables in main.tf
        uses: tvarohohlavy/inplace-envsubst-action@v1.0.0
        env:
          STATEFILE_PATH:  "${{ env.VM_NAME }}/terraform.tfstate"
          TF_ENCRYPTION_KEY: ${{ secrets.TF_ENCRYPTION_PASSWORD }}
        with:
          variables: |
            $STATEFILE_PATH
            $TF_ENCRYPTION_KEY
          files: |
            terraform/main.tf

      - name: Create VM from template with OpenTofu
        id: create-vm
        working-directory: terraform
        run: |
          # init, plan, apply
          tofu init --plugin-dir ./mirror
          tofu plan -out "tfplan" | tee tfplan.log
          tofu apply -auto-approve "tfplan"
          # save tfplan to output for later use
          echo "TFPLAN<<EOF" >> $GITHUB_OUTPUT
          echo "$(cat tfplan.log)" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        env:
          TF_LOG: "ERROR"
          # vCenter
          TF_VAR_vCenterServer: ${{ secrets.VCENTER_HOST }}
          TF_VAR_vCenterUsername: ${{ secrets.VCENTER_USER }}
          TF_VAR_vCenterPassword: ${{ secrets.VCENTER_PASS }}
          TF_VAR_vCenterInsecureConnection: ${{ secrets.VCENTER_INSECURE_CONNECTION }}
          TF_VAR_vCenterDatacenterName: ${{ vars.VCENTER_DATACENTER_NAME }}
          TF_VAR_clusterName: ${{ vars.VCENTER_CLUSTER_NAME }}
          TF_VAR_datastoreName: ${{ vars.VCENTER_DATASTORE_NAME }}
          # ubuntu 22.04 server x64
          TF_VAR_templateName: ${{ vars.UBUNTU_22_04_SERVER_X64_VM_TEMPLATE_NAME }}
          TF_VAR_libraryName: ${{ vars.VCENTER_PACKER_CONTENT_LIBRARY_NAME }}
          # specific to the VM
          TF_VAR_vmName: ${{ env.VM_NAME }}
          TF_VAR_vmFolder: ${{ env.VM_FOLDER }}
          # network
          TF_VAR_portGroup: ${{ vars.VCENTER_DEFAULT_PORT_GROUP }}
          TF_VAR_vmIPAddresses: "[\"${{ env.VM_IP_ADDRESS }}\"]"
          TF_VAR_vmIPNetmask: ${{ vars.VCENTER_DEFAULT_PORT_GROUP_NETMASK }}
          TF_VAR_vmIPGateway: ${{ vars.VCENTER_DEFAULT_PORT_GROUP_GATEWAY }}
          TF_VAR_dnsServerList: ${{ vars.VM_DNS_SERVER_LIST_PUBLIC }}
          TF_VAR_vmDomain: ${{ vars.VM_DOMAIN_NAME_LAB }}
          # access
          TF_VAR_vmUsername: ${{ secrets.VM_USERNAME }}
          TF_VAR_vmPassword: ${{ secrets.VM_PASSWORD }}
          TF_VAR_authorizedSshKeys: "[\"${{ secrets.JT_SSH_PUBLIC_KEY }}\",\"${{ secrets.RUNNER01_SSH_PUBLIC_KEY }}\"]"

      - name: Workaround for git
        if: ${{ ! contains(steps.create-vm.outputs.TFPLAN, 'found no differences, so no changes are needed') }}  
        run: git config --global --add safe.directory '*'

      - uses: stefanzweifel/git-auto-commit-action@v5
        if: ${{ ! contains(steps.create-vm.outputs.TFPLAN, 'found no differences, so no changes are needed') }}
        with:
          file_pattern: 'terraform/${{ env.VM_NAME }}/terraform.tfstate'
          commit_message: Automatic Changes | Statefile for ${{ env.VM_NAME }}

  setup-vm:
    if: ${{ !failure() && !cancelled() }}
    needs: [create-vm-from-template]
    runs-on: [self-hosted, linux, initial]
    strategy:
      matrix:
        include:
          - vm_name: pihole01
            vm_ip_address: ${{ vars.VM_PIHOLE01_IP }}
          - vm_name: pihole02
            vm_ip_address: ${{ vars.VM_PIHOLE02_IP }}
    env:
      VM_NAME: ${{ matrix.vm_name }}
      VM_IP_ADDRESS: ${{ matrix.vm_ip_address }}
    steps:
      - name: Install Pihole
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.VM_IP_ADDRESS }}
          username: ${{ secrets.VM_USERNAME }}
          key: ${{ secrets.RUNNER01_SSH_PRIVATE_KEY }}
          script: |
            curl -sSL https://install.pi-hole.net | bash
