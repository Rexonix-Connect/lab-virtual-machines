name: Day2 | Create temporary VM

on:
  workflow_dispatch:
    inputs:
      vmName:
        description: 'Name of the VM to create'
        required: true
        type: string
      customPortGroup:
        description: 'Name of the port group to connect the VM to. Empty for default. Default is the default port group.'
        type: string
      useDhcp:
        description: 'Use DHCP for the VM. Default is true.'
        type: boolean
        default: true
      customIPAddress:
        description: 'Custom IP address(es) for the VM. Separate multiple with comma. useDhcp must be false for this to apply.'
        type: string
      customNetmask:
        description: 'Custom netmask for the VM. Empty for default. Default is the default port group netmask. useDhcp must be false for this to apply.'
        type: string
      customGateway:
        description: 'Custom gateway for the VM. Empty for default. Default is the default port group gateway. useDhcp must be false for this to apply.'
        type: string
      customDNS:
        description: 'Custom DNS server(s) for the VM. Empty for default. Separate multiple with comma. Default is the default DNS server. can be left empty with useDhcp true.'
        type: string
      customDomain:
        description: 'Custom domain for the VM. Empty for default. Default is the default domain. can be left empty with useDhcp true.'
        type: string
      customAuthorizedKeys:
        description: 'Custom authorized SSH keys for the VM. Separate multiple with comma. Default is the default authorized keys only.'
        type: string
      autoDelete:
        description: 'Automatically delete the VM after a certain time in minutes. Default is 0 - disabled.'
        type: number
        default: 0
      
env:
  VM_TEMPLATE_NAME: ${{ vars.UBUNTU_22_04_SERVER_X64_VM_TEMPLATE_NAME }}
  VM_NAME: ${{ github.event.inputs.vmName }}
  VM_FOLDER: TEMP-can-be-deleted
  VM_USE_DHCP: ${{ github.event.inputs.useDhcp }}
  VM_PORT_GROUP: ${{ github.event.inputs.customPortGroup || vars.VCENTER_DEFAULT_PORT_GROUP }}
  VM_IP_NETMASK: ${{ github.event.inputs.customNetmask || vars.VCENTER_DEFAULT_PORT_GROUP_NETMASK }}
  VM_IP_GATEWAY: ${{ github.event.inputs.customGateway || vars.VCENTER_DEFAULT_PORT_GROUP_GATEWAY }}
  VM_DOMAIN_NAME: ${{ github.event.inputs.customDomain || vars.VM_DOMAIN_NAME_LAB }}



jobs:
  create-vm-from-template:
    runs-on: [self-hosted, linux, initial, rexonix-infra]
    container: ghcr.io/opentofu/opentofu:1.9.0
    steps:
      - uses: Anush008/clean-after-action@v4.2.0

      - uses: actions/checkout@v4

      - name: Set encryption key in main.tf
        uses: tvarohohlavy/inplace-envsubst-action@v1.0.0
        env:
          STATEFILE_PATH:  "temp-terraform.tfstate"
          TF_ENCRYPTION_KEY: ${{ secrets.TF_ENCRYPTION_PASSWORD }}
        with:
          variables: |
            $STATEFILE_PATH
            $TF_ENCRYPTION_KEY
          files: |
            terraform/main.tf

      - name: Process DNS servers
        run: |
          if [ -z "${{ github.event.inputs.customDNS }}" ]; then
            echo "No custom DNS servers provided, using default."
            export VM_DNS_SERVER="[\"${{ vars.DNS_SERVER_IPV4_LAB_VIP }}\"]"
          else
            echo "Custom DNS servers provided."
            export VM_DNS_SERVER="[\"$(echo ${{ github.event.inputs.customDNS }} | sed 's/,/","/g')\"]"
          fi
          echo "VM_DNS_SERVER=$VM_DNS_SERVER" >> $GITHUB_ENV

      - name: Process IP address
        run: |
          if [ "${{ github.event.inputs.useDhcp }}" = "false" ]; then
            echo "Custom IP address provided."
            export VM_IP_ADDRESS="[\"$(echo ${{ github.event.inputs.customIPAddress }} | sed 's/,/","/g')\"]"
          else
            echo "No custom IP address provided, using DHCP."
            export VM_IP_ADDRESS="[]"
          fi
          echo "VM_IP_ADDRESS=$VM_IP_ADDRESS" >> $GITHUB_ENV

      - name: Process Authorized SSH keys
        run: |
          if [ -z "${{ github.event.inputs.customAuthorizedKeys }}" ]; then
            echo "No custom authorized SSH keys provided, using default."
            export VM_AUTHORIZED_SSH_KEYS="[\"${{ secrets.JT_SSH_PUBLIC_KEY }}\",\"${{ secrets.RUNNER01_SSH_PUBLIC_KEY }}\"]"
          else
            echo "Custom authorized SSH keys provided."
            export VM_AUTHORIZED_SSH_KEYS="[\"${{ secrets.JT_SSH_PUBLIC_KEY }}\",\"${{ secrets.RUNNER01_SSH_PUBLIC_KEY }}\",\"$(echo ${{ github.event.inputs.customAuthorizedKeys }} | sed 's/,/\",\"/g')\"]"
          fi
          echo "VM_AUTHORIZED_SSH_KEYS=$VM_AUTHORIZED_SSH_KEYS" >> $GITHUB_ENV

      - name: Create VM from template with OpenTofu
        id: create-vm
        working-directory: terraform
        run: |
          # init, plan, apply
          tofu init --plugin-dir ./mirror
          tofu plan -out "tfplan" | tee tfplan.log
          tofu apply -auto-approve "tfplan"
          # save tfplan to output for later use
          echo "TFPLAN<<EOF" >> $GITHUB_OUTPUT
          echo "$(cat tfplan.log)" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        env:
          TF_LOG: "ERROR"
          # vCenter
          TF_VAR_vCenterServer: ${{ secrets.VCENTER_HOST }}
          TF_VAR_vCenterUsername: ${{ secrets.VCENTER_USER }}
          TF_VAR_vCenterPassword: ${{ secrets.VCENTER_PASS }}
          TF_VAR_vCenterInsecureConnection: ${{ secrets.VCENTER_INSECURE_CONNECTION }}
          TF_VAR_vCenterDatacenterName: ${{ vars.VCENTER_DATACENTER_NAME }}
          TF_VAR_clusterName: ${{ vars.VCENTER_CLUSTER_NAME }}
          TF_VAR_datastoreName: ${{ vars.VCENTER_DATASTORE_NAME }}
          # ubuntu 22.04 server x64
          TF_VAR_templateName: ${{ env.VM_TEMPLATE_NAME }}
          TF_VAR_libraryName: ${{ vars.VCENTER_PACKER_CONTENT_LIBRARY_NAME }}
          # specific to the VM
          TF_VAR_vmName: ${{ env.VM_NAME }}
          TF_VAR_vmFolder: ${{ env.VM_FOLDER }}
          # network
          TF_VAR_useDhcp: ${{ env.VM_USE_DHCP }}
          TF_VAR_portGroup: ${{ env.VM_PORT_GROUP }}
          TF_VAR_vmIPAddresses: ${{ env.VM_IP_ADDRESS }}
          TF_VAR_vmIPNetmask: ${{ env.VM_IP_NETMASK }}
          TF_VAR_vmIPGateway: ${{ env.VM_IP_GATEWAY }}
          TF_VAR_dnsServerList: ${{ env.VM_DNS_SERVER }}
          TF_VAR_vmDomain: ${{ env.VM_DOMAIN_NAME }}
          # access
          TF_VAR_vmUsername: ${{ secrets.VM_USERNAME }}
          TF_VAR_vmPassword: ${{ secrets.VM_PASSWORD }}
          TF_VAR_authorizedSshKeys: ${{ env.VM_AUTHORIZED_SSH_KEYS }}

  auto-delete-vm:
    runs-on: [self-hosted, linux, initial, rexonix-infra]
    needs: create-vm-from-template
    if: ${{ github.event.inputs.autoDelete != 0 }}
    env:
      GOVC_INSECURE: ${{ secrets.VCENTER_INSECURE_CONNECTION }}
      GOVC_URL: ${{ secrets.VCENTER_HOST }}
      GOVC_USERNAME: ${{ secrets.VCENTER_USER }}
      GOVC_PASSWORD: ${{ secrets.VCENTER_PASS }}
    steps:
      - uses: Anush008/clean-after-action@v4.2.0

      - uses: actions/checkout@v4

      - name: Wait for VM deletion
        run: sleep ${{ github.event.inputs.autoDelete }}m

      - name: Install govc
        run: |
          if ! command -v govc &> /dev/null
          then
              curl -L -o - "https://github.com/vmware/govmomi/releases/latest/download/govc_$(uname -s)_$(uname -m).tar.gz" \
                   | sudo tar -C /usr/local/bin -xvzf - govc
          fi
          govc version

      - name: Delete VM if it exists
        run: |
          govc vm.destroy -dc=${{ vars.VCENTER_DATACENTER_NAME }} \
                          -vm.ipath=/${{ vars.VCENTER_DATACENTER_NAME }}/vm/${{ env.VM_FOLDER }}/${{ env.VM_NAME }} \
                          ${{ env.VM_NAME }} \
                          >/dev/null 2>&1 || true
